meta {
  name: Create template
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/api/v1/templates
  body: json
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

vars:pre-request {
  randomTemplateName: null
}

body:json {
  {
    "contents":[{
      "templateName":"name A",
      "lang":"en",
      "subject":"subj A {{var1}}",
      "excerpt":"expt A {{var2en}}",
      "plainText":"pt A",
      "richText":"rt A"
    },{
      "templateName":"name B",
      "lang":"ga",
      "subject":"subj B {{var1}}",
      "excerpt":"expt B {{var2ga}}",
      "plainText":"pt B",
      "richText":"rt B"
    }],
    "variables":[{
      "name":"var1",
      "type":"remove?",
      "languages":["en","ga"]
    },{
      "name":"var2en",
      "type":"remove?",
      "languages":["en"]
    },{
      "name":"var2ga",
      "type":"remove?",
      "languages":["ga"]
    }]
  }
}

vars:post-response {
  templateId: res.body.data.id
}

script:pre-request {
  const uuid = require("uuid")
  const randomTemplateName = uuid.v4()
  bru.setVar("randomTemplateName", randomTemplateName)
  // if using body:json with interpolation variables, it will always take previous value instead of acting on pre-request
  req.setBody({
  "contents": [
    {
      "templateName": `A ${randomTemplateName}`,
      "lang": "en",
      "subject": "subj A {{var1}}",
      "excerpt": "expt A {{var2en}}",
      "plainText": "pt A",
      "richText": "rt A"
    },
    {
      "templateName": `B ${randomTemplateName}`,
      "lang": "ga",
      "subject": "subj B {{var1}}",
      "excerpt": "expt B {{var2ga}}",
      "plainText": "pt B",
      "richText": "rt B"
    }
  ],
  "variables": [
    {
      "name": "var1",
      "type": "remove?",
      "languages": ["en", "ga"]
    },
    {
      "name": "var2en",
      "type": "remove?",
      "languages": ["en"]
    },
    {
      "name": "var2ga",
      "type": "remove?",
      "languages": ["ga"]
    }
  ]
  })
}

tests {
  test("should return uuid id", function(){
    const body = res.getBody()
    expect(body.data.id).to.match(/^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i)
  })
}
