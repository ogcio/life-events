meta {
  name: Get Impersonated Token
  type: http
  seq: 4
}

post {
  url: {{logtoApiUrl}}/oidc/token
  body: formUrlEncoded
  auth: none
}

headers {
  Content-Type: application/x-www-form-urlencoded
  Authorization: Basic {{process.env.BRUNO_BASIC_MESSAGING_APP_TOKEN}}
}

body:form-urlencoded {
  grant_type: urn:ietf:params:oauth:grant-type:token-exchange
  scope: messaging:message.self:read messaging:citizen.self:read messaging:citizen.self:write
  resource: {{process.env.MESSAGING_API_RESOURCE_INDICATOR}}
  client_id: {{process.env.BRUNO_MESSAGING_APP_ID}}
  subject_token: {{subjectToken}}
  subject_token_type: urn:ietf:params:oauth:token-type:access_token
}

vars:post-response {
  citizenAccessToken: res.body.access_token
}

assert {
  res.status: eq 200
  res.body.access_token: isDefined
  ~res.body.scope: eq messaging:provider:* messaging:citizen:* messaging:event:read profile:user:read messaging:template:*
}
