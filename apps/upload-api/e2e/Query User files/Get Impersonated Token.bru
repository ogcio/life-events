meta {
  name: Get Impersonated Token
  type: http
  seq: 4
}

post {
  url: {{logtoApiUrl}}/oidc/token
  body: formUrlEncoded
  auth: none
}

headers {
  Content-Type: application/x-www-form-urlencoded
  Authorization: Basic {{process.env.BRUNO_BASIC_UPLOAD_APP_TOKEN}}
}

body:form-urlencoded {
  grant_type: urn:ietf:params:oauth:grant-type:token-exchange
  scope: upload:file.self:read
  resource: {{process.env.UPLOAD_API_RESOURCE_INDICATOR}}
  client_id: {{process.env.BRUNO_UPLOAD_APP_ID}}
  subject_token: {{subjectToken}}
  subject_token_type: urn:ietf:params:oauth:token-type:access_token
}

vars:post-response {
  citizenAccessToken: res.body.access_token
}

assert {
  res.status: eq 200
  res.body.access_token: isDefined
  ~res.body.scope: eq messaging:provider:* messaging:citizen:* messaging:event:read profile:user:read messaging:template:*
}

docs {
  # Get impersonation access token #
  
  Request used to get an access token as the user for whom we asked a subject token for with the **Get Subject Token**.
  
  The authorization is made through the *Authorization* header containing a **BASIC** token. 
  The value of the token is obtained by encoding the `application_id:application_secret` of a Web application in base64.
  
  The `client_id` used in the body must be the same as the value used in the `application_id` described before.
  
  ## Please Note ##
  
  In this case the **BASIC** token used differs from the one used in **Get Management API Token** because in the lattest we used an *M2M* application as client, but in this request we need to use a *Traditional Web* application as client. 
  
  The M2M application can't ask for this type of `grant_type`.
}
