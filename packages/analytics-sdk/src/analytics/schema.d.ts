/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/websites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all websites configurations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The tracker url of the website */
                                tracker_url: string;
                                /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                                cookieless: boolean;
                                /** @description Bypass adblockers using custom tracker url */
                                bypass_adblockers: boolean;
                                /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                                track_page_view: boolean;
                                /** @description Whether to enable automatic tracking of outlinks and downloads */
                                link_tracking: boolean;
                                /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                                heart_beat_timer: number;
                                /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                                browser_feature_detection: boolean;
                                custom_dimensions: {
                                    [key: string]: string;
                                } & {
                                    [key: string]: string;
                                };
                                /**
                                 * Format: uuid
                                 * @description The UUID of the website config
                                 */
                                id: string;
                                /** @description The name of the website config */
                                name: string;
                                /** @description The domain of the website config */
                                domain: string;
                                site_ids: number[];
                                /** @description The organization ID of the website config, used for multi-tenant support adopting the org-id of logto */
                                organization_id: string;
                                /** @description The creation date of the website config */
                                created_at: string;
                                /** @description The update date of the website config */
                                updated_at: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @description Create a new website configuration */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-matomo-token"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The tracker url of the website */
                        tracker_url: string;
                        /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                        cookieless: boolean;
                        /** @description Bypass adblockers using custom tracker url */
                        bypass_adblockers: boolean;
                        /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                        track_page_view: boolean;
                        /** @description Whether to enable automatic tracking of outlinks and downloads */
                        link_tracking: boolean;
                        /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                        heart_beat_timer: number;
                        /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                        browser_feature_detection: boolean;
                        custom_dimensions: {
                            [key: string]: string;
                        } & {
                            [key: string]: string;
                        };
                        /** @description The name of the website config */
                        name: string;
                        /** @description The domain of the website config */
                        domain: string;
                        site_ids: number[];
                        /**
                         * Format: uuid
                         * @description Optional UUID for the website config. If not provided, a new UUID7 will be generated.
                         */
                        id?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The tracker url of the website */
                                tracker_url: string;
                                /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                                cookieless: boolean;
                                /** @description Bypass adblockers using custom tracker url */
                                bypass_adblockers: boolean;
                                /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                                track_page_view: boolean;
                                /** @description Whether to enable automatic tracking of outlinks and downloads */
                                link_tracking: boolean;
                                /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                                heart_beat_timer: number;
                                /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                                browser_feature_detection: boolean;
                                custom_dimensions: {
                                    [key: string]: string;
                                } & {
                                    [key: string]: string;
                                };
                                /**
                                 * Format: uuid
                                 * @description The UUID of the website config
                                 */
                                id: string;
                                /** @description The name of the website config */
                                name: string;
                                /** @description The domain of the website config */
                                domain: string;
                                site_ids: number[];
                                /** @description The organization ID of the website config, used for multi-tenant support adopting the org-id of logto */
                                organization_id: string;
                                /** @description The creation date of the website config */
                                created_at: string;
                                /** @description The update date of the website config */
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a website configuration by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The tracker url of the website */
                                tracker_url: string;
                                /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                                cookieless: boolean;
                                /** @description Bypass adblockers using custom tracker url */
                                bypass_adblockers: boolean;
                                /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                                track_page_view: boolean;
                                /** @description Whether to enable automatic tracking of outlinks and downloads */
                                link_tracking: boolean;
                                /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                                heart_beat_timer: number;
                                /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                                browser_feature_detection: boolean;
                                custom_dimensions: {
                                    [key: string]: string;
                                } & {
                                    [key: string]: string;
                                };
                                /**
                                 * Format: uuid
                                 * @description The UUID of the website config
                                 */
                                id: string;
                                /** @description The name of the website config */
                                name: string;
                                /** @description The domain of the website config */
                                domain: string;
                                site_ids: number[];
                                /** @description The organization ID of the website config, used for multi-tenant support adopting the org-id of logto */
                                organization_id: string;
                                /** @description The creation date of the website config */
                                created_at: string;
                                /** @description The update date of the website config */
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a website configuration by ID */
        patch: {
            parameters: {
                query?: never;
                header?: {
                    "x-matomo-token"?: string;
                };
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The tracker url of the website */
                        tracker_url?: string;
                        /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                        cookieless?: boolean;
                        /** @description Bypass adblockers using custom tracker url */
                        bypass_adblockers?: boolean;
                        /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                        track_page_view?: boolean;
                        /** @description Whether to enable automatic tracking of outlinks and downloads */
                        link_tracking?: boolean;
                        /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                        heart_beat_timer?: number;
                        /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                        browser_feature_detection?: boolean;
                        custom_dimensions?: {
                            [key: string]: string;
                        } & {
                            [key: string]: string;
                        };
                        /** @description The name of the website config */
                        name?: string;
                        /** @description The domain of the website config */
                        domain?: string;
                        site_ids?: number[];
                        /**
                         * Format: uuid
                         * @description Optional UUID for the website config. If not provided, a new UUID7 will be generated.
                         */
                        id?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The tracker url of the website */
                                tracker_url: string;
                                /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                                cookieless: boolean;
                                /** @description Bypass adblockers using custom tracker url */
                                bypass_adblockers: boolean;
                                /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                                track_page_view: boolean;
                                /** @description Whether to enable automatic tracking of outlinks and downloads */
                                link_tracking: boolean;
                                /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                                heart_beat_timer: number;
                                /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                                browser_feature_detection: boolean;
                                /**
                                 * @description Custom dimensions example: { 'dimension1': 'value1', 'dimension2': 'value2' }
                                 * @example {
                                 *       "dimension1": "value1",
                                 *       "dimension2": "value2"
                                 *     }
                                 */
                                custom_dimensions: {
                                    [key: string]: string;
                                };
                                /**
                                 * Format: uuid
                                 * @description The UUID of the website config
                                 */
                                id: string;
                                /** @description The name of the website config */
                                name: string;
                                /** @description The domain of the website config */
                                domain: string;
                                site_ids: number[];
                                /** @description The organization ID of the website config, used for multi-tenant support adopting the org-id of logto */
                                organization_id: string;
                                /** @description The creation date of the website config */
                                created_at: string;
                                /** @description The update date of the website config */
                                updated_at: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/websites/{id}/tracking-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get tracking code for a website */
        get: {
            parameters: {
                query?: {
                    site_ids?: number[];
                    /** @description The tracker url of the website */
                    tracker_url?: string;
                    /** @description Set cookieless if you want to track without cookies (GDPR compliance) */
                    cookieless?: boolean;
                    /** @description Bypass adblockers using custom tracker url */
                    bypass_adblockers?: boolean;
                    /** @description Whether to track page views automatically when the JavaScript tracking code loads */
                    track_page_view?: boolean;
                    /** @description Whether to enable automatic tracking of outlinks and downloads */
                    link_tracking?: boolean;
                    /** @description Set the heart beat timer (in seconds) to track how much time users spend on pages */
                    heart_beat_timer?: number;
                    /** @description Whether to detect browser features like cookies, Java, Flash for visitor segmentation */
                    browser_feature_detection?: boolean;
                    /** @description The custom user ID to track */
                    user_id?: string;
                };
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                script: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websites/{id}/track-event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Track event for a website */
        post: {
            parameters: {
                query?: {
                    /** @description If true, use code-based tracking */
                    code?: boolean;
                };
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of site IDs */
                        site_ids?: number[];
                        event: {
                            /**
                             * @description The event category.
                             * @example Category 1
                             */
                            e_c?: string;
                            /**
                             * @description The event action.
                             * @example Action 1
                             */
                            e_a?: string;
                            /**
                             * @description The event name.
                             * @example Event 1
                             */
                            e_n?: string;
                            /**
                             * @description The event value. Must be a float or integer value (numeric), not a string.
                             * @example 1
                             */
                            e_v?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: unknown;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websites/{id}/track-page-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Track page view for a website */
        post: {
            parameters: {
                query?: {
                    /** @description If true, use code-based tracking */
                    code?: boolean;
                };
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of site IDs */
                        site_ids?: number[];
                        event: {
                            /** @description Custom title for the page view, overrides the default title of the page. */
                            action_name?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: unknown;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websites/{id}/track-site-search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Track site search for a website */
        post: {
            parameters: {
                query?: {
                    /** @description If true, use code-based tracking */
                    code?: boolean;
                };
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of site IDs */
                        site_ids?: number[];
                        event: {
                            /** @description The search keyword,When specified, the request will not be tracked as a normal pageview but will instead be tracked as a Site Search request.  */
                            search: string;
                            /** @description when search is specified, you can optionally specify a search category with this parameter. */
                            search_cat?: string;
                            /** @description when search is specified, we also recommend setting the search_count to the number of search results displayed on the results page. When keywords are tracked with &search_count=0 they will appear in the 'No Result Search Keyword' report. */
                            search_count?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: unknown;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websites/{id}/track-out-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Track outgoing link */
        post: {
            parameters: {
                query?: {
                    /** @description If true, use code-based tracking */
                    code?: boolean;
                };
                header?: never;
                path: {
                    /** @description Website UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of site IDs */
                        site_ids?: number[];
                        event: {
                            /** @description An external URL the user has opened. Used for tracking outlink clicks. */
                            link?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: unknown;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check the health of the API */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                status: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check the database connection */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                status: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate an access token using oauth2 client credentials flow */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The organization ID */
                        organizationId: string;
                        /** @description The application ID */
                        applicationId: string;
                        /** @description The application secret */
                        applicationSecret: string;
                        /**
                         * @description The scopes to generate the token for
                         * @example [
                         *       "analytics:website:read",
                         *       "analytics:website:write",
                         *       "analytics:website:tracking"
                         *     ]
                         */
                        scopes: string[];
                        /** @description The Logto OIDC endpoint */
                        logtoOidcEndpoint: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            accessToken: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Code used to categorize the error */
                            code: string;
                            /** @description Description of the error */
                            detail: string;
                            /** @description Unique request id. This one will be used to troubleshoot the problems */
                            requestId: string;
                            /** @description Name of the error type */
                            name: string;
                            /** @description List of the validation errors */
                            validation?: {
                                fieldName: string;
                                message: string;
                            }[];
                            validationContext?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
