trigger:
  - dev
  - uat
  - sta
  - feat/improve-pipeline

pr:
  branches:
    include:
      - "*"

parameters:
  - name: services
    type: object
    default: ["web", "mock-api", "payments", "messaging"]

  - name: destroy
    type: boolean
    default: false
  
  - name: envBranches
    type: object
    default: ["refs/heads/dev", "refs/heads/sta", "refs/heads/uat", "refs/heads/feat/improve-pipeline"]

variables:
  - template: pipeline-variables/dev.yml

stages:
  - stage: securityScan
    displayName: Security Scans
    jobs:
      - job: gitLeaksScan
        #continueOnError: True
        pool:
          vmImage: "ubuntu-22.04"
        displayName: GitLeaks Scan
        steps:
          - task: DockerInstaller@0
            displayName: Docker Installer
            inputs:
              dockerVersion: 17.09.0-ce
              releaseType: stable
          - script: |
              docker pull zricethezav/gitleaks:v8.10.3
              docker run --rm -i -v "$(pwd):/src" zricethezav/gitleaks:v8.10.3 detect --source="/src" -c "src/.gitleaks.toml"  --no-git -v
            displayName: GitLeaks Scan
  - stage: BuildDeps
    displayName: Build service dependencies
    jobs:  
      - job: BuildBaseContainer
        displayName: Build base container
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: Docker@2
          displayName:  Build base image
          inputs:
            command: build
            repository: base-deps
            tags: 'latest'
            dockerfile: ./Dockerfile
            buildContext: '$(Build.SourcesDirectory)'
        - task: Docker@0
          displayName: 'Docker save base'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'save -o $(Build.ArtifactStagingDirectory)/image_base_$(Build.BuildId).tar base-deps:latest'
        - publish:  $(Build.ArtifactStagingDirectory)
          artifact: 'docker-base-$(Build.BuildId)'
        - task: Docker@2
          displayName:  Build design system image
          inputs:
            command: build
            repository: design-system-container
            tags: 'latest'
            dockerfile: packages/design-system/Dockerfile
            buildContext: '$(Build.SourcesDirectory)'
        - task: Docker@0
          displayName: 'Docker save design-system'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'save -o $(Build.ArtifactStagingDirectory)/image_design_system_$(Build.BuildId).tar design-system-container:latest'
        - publish:  $(Build.ArtifactStagingDirectory)
          artifact: 'docker-design-system-$(Build.BuildId)'
  - ${{ each serviceName in parameters.services }}:
    - stage: Build_${{ replace(serviceName, '-', '_') }}
      displayName: Build ${{ serviceName }}
      dependsOn: 
        - securityScan
        - BuildDeps
      jobs:  
      - job: Build
        displayName: Build job - ${{ serviceName }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - download: current
          artifact: 'docker-base-$(Build.BuildId)'
        - task: Docker@0
          displayName: 'Retrieve base docker image from artifacts'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'load -i $(Pipeline.Workspace)/docker-base-$(Build.BuildId)/image_base_$(Build.BuildId).tar'
        - download: current
          artifact: 'docker-design-system-$(Build.BuildId)'
        - task: Docker@0
          displayName: 'Retrieve base docker image from artifacts'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'load -i $(Pipeline.Workspace)/docker-design-system-$(Build.BuildId)/image_design_system_$(Build.BuildId).tar'
        - task: Docker@2
          displayName: Build - ${{ serviceName }}
          inputs:
            command: build
            repository: life-events-${{ serviceName }}
            dockerfile: apps/${{ serviceName }}/Dockerfile
            buildContext: '$(Build.SourcesDirectory)'
        - task: Docker@0
          displayName: 'Run a Docker command'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'save -o $(Build.ArtifactStagingDirectory)/image_${{ serviceName }}_$(Build.BuildId).tar life-events-${{ serviceName }}:$(Build.BuildId)'
        - publish:  $(Build.ArtifactStagingDirectory)
          artifact: 'docker-${{ serviceName }}-$(Build.BuildId)'
    - stage: Push_${{ replace(serviceName, '-', '_') }}
      displayName: Push ${{ serviceName }} to ECR
      dependsOn: Build_${{ replace(serviceName, '-', '_') }}
      jobs:
      - job: Push
        condition: ${{ containsValue(parameters.envBranches, variables['Build.SourceBranch']) }}
        displayName: Push - ${{ serviceName }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - download: current
          artifact: 'docker-${{ serviceName }}-$(Build.BuildId)'
        - task: Docker@0
          displayName: 'Retrieve docker image from artifacts'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'load -i $(Pipeline.Workspace)/docker-${{ serviceName }}-$(Build.BuildId)/image_${{ serviceName }}_$(Build.BuildId).tar'
        - task: ECRPushImage@1
          inputs:
            awsCredentials: $(awsServiceConnection)
            regionName: $(awsRegion)
            imageSource: 'imagename'
            sourceImageName: life-events-${{ serviceName }}
            sourceImageTag: $(Build.BuildId)
            pushTag: $(Build.SourceBranchName)
            repositoryName: life-events-${{ serviceName }}
  - stage: RunE2ETestsPayments
    displayName: Run E2E tests for payments service
    dependsOn: 
      - Build_payments
    pool:
      vmImage: 'ubuntu-latest'
    jobs:  
      - job: RunE2ETests
        displayName: Setup Environment and un payments service job
        strategy:
          matrix:
            chromium-1:
              project: 'Desktop Chrome'
              shard: 1/3
            chromium-2:
              project: 'Desktop Chrome'
              shard: 2/3
            chromium-3:
              project: 'Desktop Chrome'
              shard: 3/3
            firefox-1:
              project: 'Desktop Firefox'
              shard: 1/3
            firefox-2:
              project: 'Desktop Firefox'
              shard: 2/3
            firefox-3:
              project: 'Desktop Firefox'
              shard: 3/3
            webkit-1:
              project: 'Desktop Safari'
              shard: 1/3
            webkit-2:
              project: 'Desktop Safari'
              shard: 2/3
            webkit-3:
              project: 'Desktop Safari'
              shard: 3/3
            chromium-mobile-1:
              project: 'Mobile Chrome'
              shard: 1/3
            chromium-mobile-2:
              project: 'Mobile Chrome'
              shard: 2/3
            chromium-mobile-3:
              project: 'Mobile Chrome'
              shard: 3/3
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18'
            displayName: 'Install Node.js'
          - script: |
              cd apps/payments && npm ci
            displayName: 'npm ci'
          - script: npm run start 
            displayName: Start Application
            run: |
              while ! curl --silent --output /dev/null --fail --max-time 300 http://localhost:3001; do
                sleep 1
              done
              echo "Application is ready!"
          - script: npx playwright install --with-deps
            displayName: 'Install Playwright browsers'
          - script: npx playwright test --project=$(project) --shard=$(shard)
            displayName: 'Run Playwright tests'
            env:
              CI: 'true'
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              searchFolder: 'test-results'
              testResultsFormat: 'JUnit'
              testResultsFiles: 'e2e-junit-results.xml'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Payments E2E Tests'
            condition: succeededOrFailed()
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: playwright-report
              artifact: playwright-report
              publishLocation: 'pipeline'
            condition: succeededOrFailed()
