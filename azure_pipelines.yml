trigger:
  - dev
  - uat
  - sta

pr:
  autoCancel: true
  branches:
    include:
      - "*"

# Services object is now defined per environment. 
# Check the variables file for the desired environment!
parameters:
  - name: buildBranches
    type: object
    default: ["dev", "sta", "uat"]

  - name: validEnvironments
    type: object
    displayName: List of valid environments to deploy (do not change)
    default: ['dev','sta', 'uat', 'prd']

  - name: vmImage
    type: string
    default: "ubuntu-22.04"

variables:
  - name: pushArtefacts
    value: ${{ containsValue(parameters.buildBranches, variables['Build.SourceBranchName']) }}
  - ${{ if containsValue(parameters.validEnvironments ,variables['Build.SourceBranchName']) }}:
    - template: pipeline-variables/${{ coalesce(variables['Build.SourceBranchName'], 'fallback') }}.yml
  - ${{ else }}:
    - template: pipeline-variables/dev.yml

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      name: ogcio/building-blocks-pipelines
      ref: main
      endpoint: ogcio

stages:
  - stage: securityScan
    displayName: Security Scans
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      -  template: security/gitleaks.yml@pipeline-templates
      - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - job: bearerScan
          displayName: Bearer
          steps:
            - task: DockerInstaller@0
              displayName: Docker Installer
              inputs:
                dockerVersion: 17.09.0-ce
                releaseType: stable
            - script: |
                docker run --rm -v $(pwd):/tmp/scan bearer/bearer:latest-amd64 scan --no-color --hide-progress-bar --fail-on-severity critical,high /tmp/scan
              displayName: Code Scan
  - stage: BuildDeps
    displayName: Build service dependencies
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - template: pipeline-templates/build_dependencies.yml
  - ${{ each serviceName in split(replace(variables.services, ' ', ''), ',') }}:
    - stage: Build_${{ replace(serviceName, '-', '_') }}
      displayName: Build ${{ serviceName }}
      pool:
        vmImage: ${{ parameters.vmImage }}
      dependsOn: 
        - securityScan
        - BuildDeps
      jobs:
      - template: build/build_service.yml@pipeline-templates
        parameters:
          serviceName: ${{ serviceName }}
          pushArtefacts: ${{ variables.pushArtefacts }}
          dockerfile: apps/${{ serviceName }}/Dockerfile
          dependencies: "base-deps, design-system-container"
          # TODO: Use arguments per service
          buildArguments: '--build-arg "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$(nextPublicStripePublishableKey)" --build-arg "NEXT_PUBLIC_HOST_URL=$(nextPublicHostUrl)" --build-arg "NEXT_PUBLIC_API_ENDPOINT=$(nextPublicApiEndpoint)" --build-arg "NEXT_PUBLIC_MESSAGING_SERVICE_ENTRY_POINT=$(nextPublicMessagingServiceEntryPoint)" --build-arg "NEXT_PUBLIC_PAYMENTS_SERVICE_ENTRY_POINT=$(nextPublicPaymentsServiceEntryPoint)" --build-arg "NEXT_PUBLIC_LIFE_EVENTS_SERVICE_ENTRY_POINT=$(nextPublicLifeEventsServiceEntryPoint)" --build-arg "NEXT_PUBLIC_BUILDING_BLOCKS_LANDING_PAGE=$(nextPublicBuildingBlocksLandingPage)" --build-arg "NEXT_PUBLIC_FORMS_URL=$(nextPublicFormsUrl)" --build-arg "NEXT_PUBLIC_MATOMO_URL=$(nextPublicMatomoUrl)" --build-arg "NEXT_PUBLIC_LIFE_EVENTS_MATOMO_SITE_ID=$(nextPublicLifeEventsMatomoSiteId)" --build-arg "NEXT_PUBLIC_BUILDING_BLOCKS_MATOMO_SITE_ID=$(nextPublicBuildingBlocksMatomoSiteId)" --build-arg "NEXT_PUBLIC_PAYMENTS_MATOMO_SITE_ID=$(nextPublicPaymentsMatomoSiteId)" --build-arg "NEXT_PUBLIC_MATOMO_PROTOCOL=$(nextPublicMatomoProtocol)" --build-arg "NEXT_PUBLIC_PROFILE_SERVICE_ENTRY_POINT=$(nextPublicProfileServiceEntryPoint)" --build-arg "NEXT_PUBLIC_FORMS_SERVICE_ENTRY_POINT=$(nextPublicFormsServiceEntryPoint)" --build-arg "NEXT_PUBLIC_DESIGN_SYSTEM_SERVICE_ENTRY_POINT=$(nextPublicDesignSystemServiceEntryPoint)"'
  - stage: EnvApproval
    displayName: Approvals for deployments - ${{ upper(variables.environment) }}
    dependsOn:
      - ${{ each serviceName in split(replace(variables.services, ' ', ''), ',') }}:
        - Build_${{ replace(serviceName, '-', '_') }}
    condition: ${{ variables.pushArtefacts }}
    jobs:
    - deployment: VerifyDeployment
      displayName: Verify conditions for deployment
      environment: ${{ variables.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none
            - script: |
                date
              displayName: Show current date
  - ${{ each serviceName in split(replace(variables.services, ' ', ''), ',') }}:
    - stage: Push_${{ replace(serviceName, '-', '_') }}
      displayName: Push ${{ serviceName }} to ECR
      pool:
        vmImage: ${{ parameters.vmImage }}
      dependsOn: 
        - EnvApproval
      condition: and(${{ variables.pushArtefacts }}, succeeded())
      jobs:
      - template: build/push_image_ecr.yml@pipeline-templates
        parameters:
          awsServiceConnection: ${{ variables.awsServiceConnection }}
          awsRegion: ${{ variables.awsRegion }}
          serviceName: ${{ serviceName }}
          repositoryName: life-events-${{ serviceName }}
    - stage: Deploy_${{ replace(serviceName, '-', '_') }}
      displayName: Deploy to ECS - ${{ serviceName }}
      pool:
        vmImage: ${{ parameters.vmImage }}
      dependsOn: Push_${{ replace(serviceName, '-', '_') }}
      jobs:
      - template: deploy/deploy_ecs.yml@pipeline-templates
        parameters:
          awsServiceConnection: ${{ variables.awsServiceConnection }}
          awsRegion: ${{ variables.awsRegion }}
          serviceName: ${{ serviceName }}-service
          clusterName: life-events-ecs
    - stage: E2E_Test_${{ replace(serviceName, '-', '_') }}
      displayName: Run smoke tests - ${{ serviceName }}
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
      pool:
         vmImage: ${{ parameters.vmImage }}
      dependsOn: Deploy_${{ replace(serviceName, '-', '_') }}
      jobs:
        - template: test/smoke_test.yml@pipeline-templates
          parameters:
            serviceName: ${{ serviceName }}-service
