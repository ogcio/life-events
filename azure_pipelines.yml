trigger:
  - dev
  - uat
  - sta
  - feat/add-pipeline

pr:
  branches:
    include:
      - "*"

parameters:
  - name: services
    type: object
    default: ["web", "mock-api", "payments", "messaging"]

  - name: destroy
    type: boolean
    default: false
  
  - name: envBranches
    type: object
    default: ["dev", "uat", "sta", "feat/add-pipeline"]

variables:
  - template: pipeline-variables/dev.yml

stages:
  - stage: securityScan
    displayName: Security Scans
    jobs:
      - job: gitLeaksScan
        #continueOnError: True
        pool:
          vmImage: "ubuntu-22.04"
        displayName: GitLeaks Scan
        steps:
          - task: DockerInstaller@0
            displayName: Docker Installer
            inputs:
              dockerVersion: 17.09.0-ce
              releaseType: stable
          - script: |
              docker pull zricethezav/gitleaks:v8.10.3
              docker run --rm -i -v "$(pwd):/src" zricethezav/gitleaks:v8.10.3 detect --source="/src" -c "src/.gitleaks.toml"  --no-git -v
            displayName: GitLeaks Scan
  - ${{ each serviceName in parameters.services }}:
    - stage: Build_${{ replace(serviceName, '-', '_') }}
      displayName: Build ${{ serviceName }}
      dependsOn: securityScan
      jobs:  
      - job: Build
        displayName: Build job - ${{ serviceName }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: Docker@2
          displayName: Build - ${{ serviceName }}
          inputs:
            command: build
            repository: life-events-${{ serviceName }}
            dockerfile: apps/${{ serviceName }}/Dockerfile
            buildContext: '$(Build.SourcesDirectory)'
        - task: Docker@0
          displayName: 'Run a Docker command'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'save -o $(Build.ArtifactStagingDirectory)/image_${{ serviceName }}_$(Build.BuildId).tar life-events-${{ serviceName }}:$(Build.BuildId)'
        - publish:  $(Build.ArtifactStagingDirectory)
          artifact: 'docker-${{ serviceName }}-$(Build.BuildId)'
    - stage: Push_${{ replace(serviceName, '-', '_') }}
      displayName: Push ${{ serviceName }} to ECR
      dependsOn: Build_${{ replace(serviceName, '-', '_') }}
      condition: and(succeeded('Build_${{ replace(serviceName, '-', '_') }}'), containsValue(parameters.envBranches, variables['build.sourceBranch']))
      jobs:  
      - job: Push
        displayName: Push - ${{ serviceName }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - download: current
          artifact: 'docker-${{ serviceName }}-$(Build.BuildId)'
        - task: Docker@0
          displayName: 'Retrieve docker image from artifacts'
          inputs:
            action: 'Run a Docker command'
            customCommand: 'load -i $(Pipeline.Workspace)/docker-${{ serviceName }}-$(Build.BuildId)/image_${{ serviceName }}_$(Build.BuildId).tar'
        - task: ECRPushImage@1
          inputs:
            awsCredentials: $(awsServiceConnection)
            regionName: $(awsRegion)
            imageSource: 'imagename'
            sourceImageName: life-events-${{ serviceName }}
            sourceImageTag: $(Build.BuildId)
            pushTag: $(Build.SourceBranchName)
            repositoryName: life-events-${{ serviceName }}
